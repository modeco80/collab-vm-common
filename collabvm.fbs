// Protocol definitions for CollabVM 2.0

namespace CollabVM;

/// User type enum
enum UserType : ubyte {
	Guest,
	Registered,
	Admin
}

/// 0x0 -> 65535x65535 coordinate pair
struct XYPair {
	/// X coordinate
	x: ushort;

	/// Y coordinate
	y: ushort;
}

/// Chat instruction.
table ChatOp {
	/// Username of the person who sent the message.
	username: string;

	/// Message contents
	message: string;
}

/// Connect instruction.
/// Username is optional. If blank, 
/// server will generate a guest[XXXXX] username for you.
table ConnectOp { 
	id: ushort;
	
	username: string;
}

table ListNode {
	/// ID of the node.
	id: ushort;
	
	/// Front-facing name of the node.
	name: string;
	
	/// Thumbnail to display.
	thumb: [ubyte];
}

table ListOp {
	/// Leave empty to have server send you this instruction back
	/// with a list of nodes.
	nodes: [ListNode];
}

/// Result of a UserRenameOp.
enum RenameResult : ubyte {
	/// Renamed successfully.
	Ok,

	/// Username is invalid (either contains bad characters, or is too long).
	Invalid,
	
	/// TODO
	RegisteredUsername,

	/// Someone is already using that username.
	UsernameTaken
}

/// Rename op
table RenameOp {
	result: RenameResult;

	/// Old username of the person who renamed.
	/// The user performing a rename operation should
	/// keep this field empty, as it is only used by
	/// the server to broadcast the new name.
	oldUsername: string;

	/// New username.
	newUsername: string;
}

table AdduserOp {
	/// Username of the user who joined.
	username: string;
}

table RemuserOp {
	/// Username of the user to be removed.
	username: string;
}

/// Turn request message.
/// Has no applcable fields.
struct TurnOp { dummyField: ushort; }

/// Cancel turn request message.
/// Has no applcable fields.
struct CancelTurnOp { dummyField: ushort; }

// Control instructions

/// Display Resize operation.
struct ResizeOp {
	/// The new size of the screen.
	newSize: XYPair;  
}

/// Image rect operation.
table ImageOp {
	/// Location of where the new area will be placed.
	location: XYPair;

	/// Width and height of the image rectangle.
	size: XYPair;

	/// Image data.
	data: [ubyte];
}

/// Key operation.
struct KeyOp {
	key: ushort;
	down: bool;
}

/// Mouse operation.
struct MouseOp {
	position: XYPair;
	buttonMask: byte;
}

table CursorUpdateOp {
	size: XYPair;
	
	/// Raw bitmap data of cursor.
	data: [ubyte];
}

/// Turn queue.
table TurnQueue {
	/// The total time (when this queue instruction was sent) of the queue in milliseconds.
	waitTime: ulong;

	/// Usernames of all users in the queue. Index 0 will be the user currently taking a turn.
	users: [string];
}

/// Type of the message stored in the Message table.
enum MessageType : ubyte {
	connect,
	turn,
	queue,
	cancelTurn,
	chat,
	rename,
	adduser,
	remuser,
	list,
	key,
	mouse,
	cursorUpdate
}

/// Message table
/// ONLY ONE MESSAGE SHOULD BE POPULATED
table Message {
	/// Which message type to isolate
	which: MessageType;
	
	connect: ConnectOp;
	
	turn: TurnOp;
	
	turnQueue: TurnQueue;
	
	cancelTurn: CancelTurnOp;
	
	chat: ChatOp;
	
	rename: RenameOp;
	
	adduser: AdduserOp;
	
	remuser: RemuserOp;

	list: ListOp;
	
	key: KeyOp;
	
	mouse: MouseOp;
	
	cursorUpdate: CursorUpdateOp;
}

root_type Message;